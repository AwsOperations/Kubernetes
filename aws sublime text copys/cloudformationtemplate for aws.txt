AWSTemplateFormatVersion: '2010-09-09'
Description: Custom VPC with EC2 instances running Jenkins and "raider" instance

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CustomVPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Jenkins and "raider" instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  JenkinsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: JenkinsInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "s3:GetObject"
                Resource: "*"
              - Effect: Allow
                Action: "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  - "arn:aws:s3:::raider_logs/*"
                  - "arn:aws:s3:::raider_logs2/*"

  DevJenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref JenkinsInstanceRole
      Tags:
        - Key: Name
          Value: dev-jenkins
      ImageId: ami-xxxxxxxxxxxxxxxxx  # Replace with Ubuntu AMI ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y openjdk-8-jdk
          wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add -
          sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
          apt-get update
          apt-get install -y jenkins
          service jenkins start

  QAInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: QAInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "s3:GetObject"
                Resource: "*"
              - Effect: Allow
                Action: "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  - "arn:aws:s3:::raider_logs/*"
                  - "arn:aws:s3:::raider_logs2/*"

  QAJenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref QAInstanceRole
      Tags:
        - Key: Name
          Value: qa-jenkins
      ImageId: ami-xxxxxxxxxxxxxxxxx  # Replace with Ubuntu AMI ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y openjdk-8-jdk
          wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add -
          sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
          apt-get update
          apt-get install -y jenkins
          service jenkins start

  RaiderInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RaiderInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "s3:GetObject"
                Resource: "*"
              - Effect: Allow
                Action: "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - "arn:aws:s3:::raider_logs/*"
                  - "arn:aws:s3:::raider_logs2/*"

  RaiderInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref RaiderInstanceRole
      Tags:
        - Key: Name
          Value: raider
      ImageId: ami-xxxxxxxxxxxxxxxxx  # Replace with Ubuntu AMI ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y openjdk-8-jdk

  RaiderLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: raider_logs

  RaiderLogs2Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: raider_logs2

Outputs:
  DevJenkinsInstanceIP:
    Description: Public IP of the dev-jenkins instance
    Value: !GetAtt DevJenkinsInstance.PublicIp

  QAJenkinsInstanceIP:
    Description: Public IP of the qa-jenkins instance
    Value: !GetAtt QAJenkinsInstance.PublicIp

  RaiderInstanceIP:
    Description: Public IP of the raider instance
    Value: !GetAtt RaiderInstance.PublicIp

  RaiderLogsBucketName:
    Description: Name of the "raider_logs" S3 bucket
    Value: !Ref RaiderLogsBucket

  RaiderLogs2BucketName:
    Description: Name of the "raider_logs2" S3 bucket
    Value: !Ref RaiderLogs2Bucket
